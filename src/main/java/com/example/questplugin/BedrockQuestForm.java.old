package com.example.questplugin;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.geysermc.geyser.api.GeyserApi;
import org.geysermc.geyser.api.GeyserSession;
import org.geysermc.geyser.api.form.SimpleForm;
import org.geysermc.geyser.api.form.ModalForm;

import java.util.List;

public class BedrockQuestForm {

    private final QuestPlugin plugin;
    private final RewardHandler rewardHandler;

    public BedrockQuestForm(QuestPlugin plugin) {
        this.plugin = plugin;
        this.rewardHandler = new RewardHandler(plugin);
    }

    public void open(Player player) {
        openTierSelector(player);
    }

    public void openTierSelector(Player player) {
        GeyserSession session = GeyserApi.api().sessionByUuid(player.getUniqueId());
        if (session == null) return;

        SimpleForm tierForm = SimpleForm.builder()
            .title("¬ßaSelect Quest Type")
            .content("¬ß7Choose a quest category")
            .button("¬ßaüìÖ Daily Quests")
            .button("¬ß9üìÜ Weekly Quests")
            .button("¬ßdüåç Global Quests")
            .build();

        session.sendForm(tierForm, response -> {
            if (response.isClosed()) return;
            switch (response.clickedButtonId()) {
                case 0 -> openList(player, QuestTier.DAILY);
                case 1 -> openList(player, QuestTier.WEEKLY);
                case 2 -> openList(player, QuestTier.GLOBAL);
            }
        });
    }

    public void openList(Player player, QuestTier tier) {
        GeyserSession session = GeyserApi.api().sessionByUuid(player.getUniqueId());
        if (session == null) return;

        List<Quest> quests = plugin.getQuestManager().getQuestsForTier(player.getUniqueId(), tier);

        String title = switch (tier) {
            case DAILY -> "¬ßaüìÖ Daily Quests";
            case WEEKLY -> "¬ß9üìÜ Weekly Quests";
            case GLOBAL -> "¬ßdüåç Global Quests";
        };

        SimpleForm form = SimpleForm.builder()
            .title(title)
            .content("¬ß7Tap a quest to view details");

        for (Quest quest : quests) {
            String progress = quest.isRewardClaimed() ? "¬ßa‚úî Claimed"
                : quest.isCompleted() ? "¬ß6üèÜ Claimable"
                : "¬ß7‚è≥ In Progress";
            form.button(quest.getRarity().getDisplayName() + "¬ßr¬ße" + quest.getDescription() + " " + progress);
        }

        session.sendForm(form, formResponse -> {
            if (formResponse.isClosed()) return;
            int index = formResponse.clickedButtonId();
            if (index < 0 || index >= quests.size()) return;
            openDetailModal(player, quests.get(index), tier);
        });
    }

    public void openDetailModal(Player player, Quest quest, QuestTier tier) {
        GeyserSession session = GeyserApi.api().sessionByUuid(player.getUniqueId());
        if (session == null) return;

        boolean claimable = quest.canClaim();
        String status = quest.isRewardClaimed() ? "¬ßa‚úî Reward Claimed"
            : quest.isCompleted() ? "¬ß6üèÜ Reward Ready!"
            : "¬ß7‚è≥ In Progress";

        String progressBar = getProgressBar((int) ((double) quest.getCurrentProgress() / quest.getTargetAmount() * 100));

        String content = String.join(" ",
            quest.getRarity().getDisplayName() + " ¬ßl" + quest.getDescription(),
            "",
            "¬ß7Progress: ¬ßf" + quest.getCurrentProgress() + "¬ß7 / ¬ßf" + quest.getTargetAmount(),
            progressBar,
            "",
            "¬ßbReward: ¬ßa" + quest.getCurrencyReward() + " coins",
            "¬ßdSkill Points: ¬ß5" + quest.getSkillPointReward(),
            "",
            "Status: " + status
        );

        ModalForm form = ModalForm.builder()
            .title("¬ßaQuest Details")
            .content(content)
            .button1(claimable ? "¬ßa‚úÖ Claim Reward" : "¬ß7‚ùå Claim Disabled")
            .button2("¬ßcBack")
            .build();

        session.sendForm(form, formResponse -> {
            if (formResponse.isClosed()) return;

            if (formResponse.firstOption()) {
                if (claimable) {
                    rewardHandler.giveReward(player, quest);
                    player.sendMessage(ChatColor.GREEN + "‚úî Claimed reward for: " + quest.getDescription());
                } else {
                    player.sendMessage(ChatColor.RED + "‚ùå You cannot claim this reward yet.");
                }
            }

            openList(player, tier);
        });
    }

    private String getProgressBar(int percent) {
        int bars = percent / 10;
        return "¬ßa" + "‚ñà".repeat(bars) + "¬ß7" + "‚ñë".repeat(10 - bars) + " ¬ßf" + percent + "%";
    }
}
